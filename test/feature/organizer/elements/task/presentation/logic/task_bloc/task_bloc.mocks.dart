// Mocks generated by Mockito 5.4.4 from annotations
// in fo_fe/test/feature/organizer/elements/task/presentation/logic/task_bloc/task_bloc_old.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fo_fe/core/error/failures.dart' as _i5;
import 'package:fo_fe/core/util/input_converter.dart' as _i4;
import 'package:fo_fe/features/organizer/elements/task/domain/repositories/task_repository.dart'
    as _i3;
import 'package:fo_fe/features/organizer/elements/task/domain/usecases/get_task_by_id.dart'
    as _i6;
import 'package:fo_fe/features/organizer/elements/task/task_lib.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRepository_1 extends _i1.SmartFake
    implements _i3.TaskRepository {
  _FakeTaskRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  @override
  _i2.Either<_i5.Failure, int> stringToUnasingInteger(String? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnasingInteger,
          [input],
        ),
        returnValue: _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #stringToUnasingInteger,
            [input],
          ),
        ),
        returnValueForMissingStub: _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #stringToUnasingInteger,
            [input],
          ),
        ),
      ) as _i2.Either<_i5.Failure, int>);
}

/// A class which mocks [GetTaskById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTaskById extends _i1.Mock implements _i6.GetTaskById {
  @override
  _i3.TaskRepository get taskRepository => (super.noSuchMethod(
        Invocation.getter(#taskRepository),
        returnValue: _FakeTaskRepository_1(
          this,
          Invocation.getter(#taskRepository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_1(
          this,
          Invocation.getter(#taskRepository),
        ),
      ) as _i3.TaskRepository);

  @override
  _i7.Future<_i2.Either<_i5.Failure, _i8.TaskEntity>> call(
          _i6.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i2.Either<_i5.Failure, _i8.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i8.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Either<_i5.Failure, _i8.TaskEntity>>.value(
                _FakeEither_0<_i5.Failure, _i8.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i5.Failure, _i8.TaskEntity>>);
}
