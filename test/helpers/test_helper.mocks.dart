// Mocks generated by Mockito 5.4.4 from annotations
// in fo_fe/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i17;

import 'package:dartz/dartz.dart' as _i6;
import 'package:data_connection_checker_nulls/data_connection_checker_nulls.dart'
    as _i7;
import 'package:fo_fe/core/error/failures.dart' as _i15;
import 'package:fo_fe/core/network/network_info.dart' as _i9;
import 'package:fo_fe/core/util/input_converter.dart' as _i18;
import 'package:fo_fe/core/util/organizer/core_util_organizer.dart' as _i5;
import 'package:fo_fe/features/organizer/items/organizer_item/organizer_item.dart'
    as _i4;
import 'package:fo_fe/features/organizer/items/reminder/domain/entities/reminder_entity.dart'
    as _i13;
import 'package:fo_fe/features/organizer/items/task/data/datasources/task_remote_data_source_impl.dart'
    as _i11;
import 'package:fo_fe/features/organizer/items/task/data/models/task_model.dart'
    as _i3;
import 'package:fo_fe/features/organizer/items/task/domain/repositories/task_repository.dart'
    as _i8;
import 'package:fo_fe/features/organizer/items/task/domain/usecases/get_task_by_id.dart'
    as _i19;
import 'package:fo_fe/features/organizer/items/task/task_lib.dart' as _i14;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskModel_1 extends _i1.SmartFake implements _i3.TaskModel {
  _FakeTaskModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrganizerItems_2<T extends _i4.OrganizerItemEntity>
    extends _i1.SmartFake implements _i5.OrganizerItems<T> {
  _FakeOrganizerItems_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_5 extends _i1.SmartFake implements Duration {
  _FakeDuration_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_6 extends _i1.SmartFake
    implements _i7.AddressCheckResult {
  _FakeAddressCheckResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_7 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_8 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRepository_9 extends _i1.SmartFake
    implements _i8.TaskRepository {
  _FakeTaskRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  @override
  _i10.Future<bool> get isInternet => (super.noSuchMethod(
        Invocation.getter(#isInternet),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
}

/// A class which mocks [TaskRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSourceImpl extends _i1.Mock
    implements _i11.TaskRemoteDataSourceImpl {
  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  set httpClient(_i2.Client? _httpClient) => super.noSuchMethod(
        Invocation.setter(
          #httpClient,
          _httpClient,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  String get serverUrl => (super.noSuchMethod(
        Invocation.getter(#serverUrl),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#serverUrl),
        ),
        returnValueForMissingStub: _i12.dummyValue<String>(
          this,
          Invocation.getter(#serverUrl),
        ),
      ) as String);

  @override
  _i10.Future<void> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<_i3.TaskModel> getTaskById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i10.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i10.Future<_i3.TaskModel>);

  @override
  _i10.Future<Map<String, dynamic>> getUpdatedTaskIfDifferent(
          Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpdatedTaskIfDifferent,
          [json],
        ),
        returnValue:
            _i10.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i10.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i10.Future<Map<String, dynamic>>);

  @override
  _i10.Future<_i3.TaskModel> postTask(_i3.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #postTask,
          [task],
        ),
        returnValue: _i10.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #postTask,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #postTask,
            [task],
          ),
        )),
      ) as _i10.Future<_i3.TaskModel>);

  @override
  _i10.Future<_i3.TaskModel> putTask(_i3.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #putTask,
          [task],
        ),
        returnValue: _i10.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #putTask,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #putTask,
            [task],
          ),
        )),
      ) as _i10.Future<_i3.TaskModel>);

  @override
  _i10.Future<_i5.OrganizerItems<_i3.TaskModel>> getUpdatedItems(
          _i5.OrganizerItems<_i3.TaskModel>? organizerItems) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpdatedItems,
          [organizerItems],
        ),
        returnValue: _i10.Future<_i5.OrganizerItems<_i3.TaskModel>>.value(
            _FakeOrganizerItems_2<_i3.TaskModel>(
          this,
          Invocation.method(
            #getUpdatedItems,
            [organizerItems],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.OrganizerItems<_i3.TaskModel>>.value(
                _FakeOrganizerItems_2<_i3.TaskModel>(
          this,
          Invocation.method(
            #getUpdatedItems,
            [organizerItems],
          ),
        )),
      ) as _i10.Future<_i5.OrganizerItems<_i3.TaskModel>>);

  @override
  _i10.Future<void> addReminderToTask(
    int? taskId,
    _i13.ReminderEntity? reminder,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReminderToTask,
          [
            taskId,
            reminder,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> addTagToTask(
    int? taskId,
    int? tagId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTagToTask,
          [
            taskId,
            tagId,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> addUserToTask(
    int? taskId,
    int? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToTask,
          [
            taskId,
            userId,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> addTask(_i14.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i8.TaskRepository {
  @override
  _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>> getTaskById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue:
            _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>>.value(
                _FakeEither_3<_i15.Failure, _i14.TaskEntity>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>>.value(
                _FakeEither_3<_i15.Failure, _i14.TaskEntity>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>>);

  @override
  _i10.Future<
      _i6.Either<_i15.Failure,
          _i5.OrganizerItems<_i14.TaskEntity>>> getTaskItemsAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskItemsAll,
          [],
        ),
        returnValue: _i10.Future<
                _i6.Either<_i15.Failure,
                    _i5.OrganizerItems<_i14.TaskEntity>>>.value(
            _FakeEither_3<_i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>(
          this,
          Invocation.method(
            #getTaskItemsAll,
            [],
          ),
        )),
        returnValueForMissingStub: _i10.Future<
                _i6.Either<_i15.Failure,
                    _i5.OrganizerItems<_i14.TaskEntity>>>.value(
            _FakeEither_3<_i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>(
          this,
          Invocation.method(
            #getTaskItemsAll,
            [],
          ),
        )),
      ) as _i10.Future<
          _i6.Either<_i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>>);

  @override
  _i10.Future<_i6.Either<_i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>>
      getTaskItemsByIdSet(_i5.IdSet? idSet) => (super.noSuchMethod(
            Invocation.method(
              #getTaskItemsByIdSet,
              [idSet],
            ),
            returnValue: _i10.Future<
                _i6.Either<_i15.Failure,
                    _i5.OrganizerItems<_i14.TaskEntity>>>.value(_FakeEither_3<
                _i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>(
              this,
              Invocation.method(
                #getTaskItemsByIdSet,
                [idSet],
              ),
            )),
            returnValueForMissingStub: _i10.Future<
                _i6.Either<_i15.Failure,
                    _i5.OrganizerItems<_i14.TaskEntity>>>.value(_FakeEither_3<
                _i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>(
              this,
              Invocation.method(
                #getTaskItemsByIdSet,
                [idSet],
              ),
            )),
          ) as _i10.Future<
              _i6.Either<_i15.Failure, _i5.OrganizerItems<_i14.TaskEntity>>>);

  @override
  _i10.Future<_i6.Either<_i15.Failure, void>> addTask(_i14.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i10.Future<_i6.Either<_i15.Failure, void>>.value(
            _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, void>>.value(
                _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, void>>);

  @override
  _i10.Future<_i6.Either<_i15.Failure, void>> addUserToTask(
    int? taskId,
    int? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToTask,
          [
            taskId,
            userId,
          ],
        ),
        returnValue: _i10.Future<_i6.Either<_i15.Failure, void>>.value(
            _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addUserToTask,
            [
              taskId,
              userId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, void>>.value(
                _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addUserToTask,
            [
              taskId,
              userId,
            ],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, void>>);

  @override
  _i10.Future<_i6.Either<_i15.Failure, void>> addTagToTask(
    int? taskId,
    int? tagId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTagToTask,
          [
            taskId,
            tagId,
          ],
        ),
        returnValue: _i10.Future<_i6.Either<_i15.Failure, void>>.value(
            _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addTagToTask,
            [
              taskId,
              tagId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, void>>.value(
                _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addTagToTask,
            [
              taskId,
              tagId,
            ],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, void>>);

  @override
  _i10.Future<_i6.Either<_i15.Failure, void>> addReminderToTask(
    int? taskId,
    _i13.ReminderEntity? reminder,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReminderToTask,
          [
            taskId,
            reminder,
          ],
        ),
        returnValue: _i10.Future<_i6.Either<_i15.Failure, void>>.value(
            _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addReminderToTask,
            [
              taskId,
              reminder,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, void>>.value(
                _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #addReminderToTask,
            [
              taskId,
              reminder,
            ],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, void>>);

  @override
  _i10.Future<_i6.Either<_i15.Failure, void>> deleteTask(int? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i10.Future<_i6.Either<_i15.Failure, void>>.value(
            _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, void>>.value(
                _FakeEither_3<_i15.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [taskId],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, void>>);
}

/// A class which mocks [OrganizerItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizerItemRepository<T extends _i4.OrganizerItemEntity>
    extends _i1.Mock implements _i4.OrganizerItemRepository<T> {
  @override
  _i10.Future<
      _i6.Either<_i15.Failure, _i5.OrganizerItems<T>>> getOrganizerItemsByIdSet(
          _i5.IdSet? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganizerItemsByIdSet,
          [id],
        ),
        returnValue:
            _i10.Future<_i6.Either<_i15.Failure, _i5.OrganizerItems<T>>>.value(
                _FakeEither_3<_i15.Failure, _i5.OrganizerItems<T>>(
          this,
          Invocation.method(
            #getOrganizerItemsByIdSet,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, _i5.OrganizerItems<T>>>.value(
                _FakeEither_3<_i15.Failure, _i5.OrganizerItems<T>>(
          this,
          Invocation.method(
            #getOrganizerItemsByIdSet,
            [id],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, _i5.OrganizerItems<T>>>);
}

/// A class which mocks [OrganizerItemEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizerItemEntity extends _i1.Mock
    implements _i4.OrganizerItemEntity {
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get subject => (super.noSuchMethod(
        Invocation.getter(#subject),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#subject),
        ),
        returnValueForMissingStub: _i12.dummyValue<String>(
          this,
          Invocation.getter(#subject),
        ),
      ) as String);

  @override
  DateTime get createdDate => (super.noSuchMethod(
        Invocation.getter(#createdDate),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.getter(#createdDate),
        ),
        returnValueForMissingStub: _FakeDateTime_4(
          this,
          Invocation.getter(#createdDate),
        ),
      ) as DateTime);

  @override
  int get creatorId => (super.noSuchMethod(
        Invocation.getter(#creatorId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [OrganizerItemSyncDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizerItemSyncDataSource<T extends _i4.OrganizerItemEntity>
    extends _i1.Mock implements _i4.OrganizerItemSyncDataSource<T> {
  @override
  _i10.Future<_i5.OrganizerItems<T>> syncTaskListWithIdSet(_i5.IdSet? idSet) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncTaskListWithIdSet,
          [idSet],
        ),
        returnValue:
            _i10.Future<_i5.OrganizerItems<T>>.value(_FakeOrganizerItems_2<T>(
          this,
          Invocation.method(
            #syncTaskListWithIdSet,
            [idSet],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.OrganizerItems<T>>.value(_FakeOrganizerItems_2<T>(
          this,
          Invocation.method(
            #syncTaskListWithIdSet,
            [idSet],
          ),
        )),
      ) as _i10.Future<_i5.OrganizerItems<T>>);
}

/// A class which mocks [OrganizerItemRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizerItemRemoteDataSource<T extends _i4.OrganizerItemEntity>
    extends _i1.Mock implements _i4.OrganizerItemRemoteDataSource<T> {
  @override
  _i10.Future<_i5.OrganizerItems<T>> getOrganizerItemsByIdSet(
          _i5.IdSet? idSet) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganizerItemsByIdSet,
          [idSet],
        ),
        returnValue:
            _i10.Future<_i5.OrganizerItems<T>>.value(_FakeOrganizerItems_2<T>(
          this,
          Invocation.method(
            #getOrganizerItemsByIdSet,
            [idSet],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.OrganizerItems<T>>.value(_FakeOrganizerItems_2<T>(
          this,
          Invocation.method(
            #getOrganizerItemsByIdSet,
            [idSet],
          ),
        )),
      ) as _i10.Future<_i5.OrganizerItems<T>>);
}

/// A class which mocks [OrganizerItemLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizerItemLocalDataSource<T extends _i4.OrganizerItemEntity>
    extends _i1.Mock implements _i4.OrganizerItemLocalDataSource<T> {
  @override
  _i10.Future<_i5.OrganizerItems<T>> getOrganizerItemsByIdSet(
          _i5.IdSet? idSet) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganizerItemsByIdSet,
          [idSet],
        ),
        returnValue:
            _i10.Future<_i5.OrganizerItems<T>>.value(_FakeOrganizerItems_2<T>(
          this,
          Invocation.method(
            #getOrganizerItemsByIdSet,
            [idSet],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.OrganizerItems<T>>.value(_FakeOrganizerItems_2<T>(
          this,
          Invocation.method(
            #getOrganizerItemsByIdSet,
            [idSet],
          ),
        )),
      ) as _i10.Future<_i5.OrganizerItems<T>>);
}

/// A class which mocks [DataConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectionChecker extends _i1.Mock
    implements _i7.DataConnectionChecker {
  @override
  List<_i7.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i7.AddressCheckOptions>[],
        returnValueForMissingStub: <_i7.AddressCheckOptions>[],
      ) as List<_i7.AddressCheckOptions>);

  @override
  set addresses(List<_i7.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(
        Invocation.setter(
          #addresses,
          _addresses,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_5(
          this,
          Invocation.getter(#checkInterval),
        ),
        returnValueForMissingStub: _FakeDuration_5(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  set checkInterval(Duration? _checkInterval) => super.noSuchMethod(
        Invocation.setter(
          #checkInterval,
          _checkInterval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.AddressCheckResult> get lastTryResults => (super.noSuchMethod(
        Invocation.getter(#lastTryResults),
        returnValue: <_i7.AddressCheckResult>[],
        returnValueForMissingStub: <_i7.AddressCheckResult>[],
      ) as List<_i7.AddressCheckResult>);

  @override
  _i10.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<_i7.DataConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i10.Future<_i7.DataConnectionStatus>.value(
            _i7.DataConnectionStatus.disconnected),
        returnValueForMissingStub: _i10.Future<_i7.DataConnectionStatus>.value(
            _i7.DataConnectionStatus.disconnected),
      ) as _i10.Future<_i7.DataConnectionStatus>);

  @override
  _i10.Stream<_i7.DataConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i10.Stream<_i7.DataConnectionStatus>.empty(),
        returnValueForMissingStub:
            _i10.Stream<_i7.DataConnectionStatus>.empty(),
      ) as _i10.Stream<_i7.DataConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Future<_i7.AddressCheckResult> isHostReachable(
          _i7.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i10.Future<_i7.AddressCheckResult>.value(_FakeAddressCheckResult_6(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i7.AddressCheckResult>.value(_FakeAddressCheckResult_6(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i10.Future<_i7.AddressCheckResult>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  @override
  _i10.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i10.Future<_i2.Response>);

  @override
  _i10.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i10.Future<_i2.Response>);

  @override
  _i10.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i2.Response>);

  @override
  _i10.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i2.Response>);

  @override
  _i10.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i2.Response>);

  @override
  _i10.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i2.Response>);

  @override
  _i10.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i10.Future<String>);

  @override
  _i10.Future<_i17.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<_i17.Uint8List>.value(_i17.Uint8List(0)),
        returnValueForMissingStub:
            _i10.Future<_i17.Uint8List>.value(_i17.Uint8List(0)),
      ) as _i10.Future<_i17.Uint8List>);

  @override
  _i10.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i10.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i10.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i18.InputConverter {
  @override
  _i6.Either<_i15.Failure, int> stringToUnasingInteger(String? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnasingInteger,
          [input],
        ),
        returnValue: _FakeEither_3<_i15.Failure, int>(
          this,
          Invocation.method(
            #stringToUnasingInteger,
            [input],
          ),
        ),
        returnValueForMissingStub: _FakeEither_3<_i15.Failure, int>(
          this,
          Invocation.method(
            #stringToUnasingInteger,
            [input],
          ),
        ),
      ) as _i6.Either<_i15.Failure, int>);
}

/// A class which mocks [GetTaskById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTaskById extends _i1.Mock implements _i19.GetTaskById {
  @override
  _i8.TaskRepository get taskRepository => (super.noSuchMethod(
        Invocation.getter(#taskRepository),
        returnValue: _FakeTaskRepository_9(
          this,
          Invocation.getter(#taskRepository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_9(
          this,
          Invocation.getter(#taskRepository),
        ),
      ) as _i8.TaskRepository);

  @override
  _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>> call(
          _i5.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>>.value(
                _FakeEither_3<_i15.Failure, _i14.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>>.value(
                _FakeEither_3<_i15.Failure, _i14.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i6.Either<_i15.Failure, _i14.TaskEntity>>);
}
